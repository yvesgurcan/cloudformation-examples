AWSTemplateFormatVersion: "2010-09-09"
Description: A Lambda that creates a user in a DynamoDB table

Parameters:
  Environment:
    Type: String
    Description: Application Environment
    Default: test

Resources:
  DynamoDBUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", ["user-table", !Ref Environment]]
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  LambdaCreateUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", ["create-user", !Ref Environment]]
      Handler: index.handler
      Role: !GetAtt LambdaRoleCreateUser.Arn
      Code:
        ZipFile: !Sub |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const userTable = "user-table";
          exports.handler = async function(event, context) {
            console.log({ event });
            const result = await dynamodb.put({
              TableName: userTable,
              Item: { ...event }
            }).promise();
            return result;
          };
      Runtime: nodejs12.x
  LambdaRoleCreateUser:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", ["LambdaRoleCreateUser", !Ref Environment]]
      Description: Role for the createUser Lambda
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
